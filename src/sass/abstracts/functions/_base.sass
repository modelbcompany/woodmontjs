// -----------------------------------------------------------------------------
// Misc app functions
// @group functions-base
// -----------------------------------------------------------------------------

/// Clamp `$value` between `$min` and `$max`.
/// @param {Number} $value - Value to clamp between `$min` and `$max`
/// @param {Number} $min   - Minimum value
/// @param {Number} $max   - Maximum value
/// @throws All parameters must be numbers for `clamp`.
/// @return {Number | Null}
@function clamp($value, $min, $max)
  $invalid-value: type-of($value) != 'number'
  $invalid-min: type-of($min) != 'number'
  $invalid-max: type-of($max) != 'number'

  @if $invalid-value or $invalid-min or $invalid-max
    @error 'All parameters must be numbers for `clamp`.'

  @return if($value > $max, $max, if($value < $min, $min, $value))

/// Retreives a value from a two dimensional map.
/// @param {Map} $map - Map to retreive value from
/// @param {*} $key - Key to retreive inner map
/// @param {*} $key2 - Key to retreive inner map value
@function map2-get($map, $key, $key2)
  @return map-get(map-get($map, $key), $key2)

/// Converts a value in px to an em or rem value
/// @param {Number} $px - Value to convert
/// @param {String} $unit [rem] - Unit to convert to
/// @return {Number}
@function size($px, $unit: 'rem')
  @if unitless($px)
    $px: $px * 1px

  @if $unit == 'em'
    @return #{$px / 16px}em
  @return #{$px / 16px}rem
